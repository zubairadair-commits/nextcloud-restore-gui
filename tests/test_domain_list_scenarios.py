#!/usr/bin/env python3
"""
Test various scenarios for the responsive domain list.
This validates behavior with different numbers of domains and window sizes.
"""

import sys
import os

# Add the current directory to the path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def print_scenario(title, description):
    """Print a scenario header"""
    print("\n" + "â”€" * 80)
    print(f"ðŸ“‹ Scenario: {title}")
    print(f"   {description}")
    print("â”€" * 80)

def test_scenarios():
    """Test different domain list scenarios"""
    print("=" * 80)
    print("Responsive Domain List - Scenario Testing")
    print("=" * 80)
    
    # Check if main file exists
    main_file = "../src/nextcloud_restore_and_backup-v9.py"
    if not os.path.exists(main_file):
        print("âœ— Main file not found")
        return False
    
    # Read file content
    with open(main_file, 'r') as f:
        content = f.read()
    
    # Find the _display_current_trusted_domains method
    start_idx = content.find('def _display_current_trusted_domains(self, parent):')
    end_idx = content.find('\n    def ', start_idx + 1)
    display_method = content[start_idx:end_idx] if start_idx != -1 and end_idx != -1 else ""
    
    all_passed = True
    
    # Scenario 1: Empty domain list
    print_scenario(
        "Empty Domain List",
        "User has no trusted domains configured yet"
    )
    
    checks = [
        ("Check for empty domains", "if not current_domains:" in display_method),
        ("Display empty message frame", "no_domains_frame = tk.Frame(parent" in display_method),
        ("Bold empty message", '"No trusted domains configured"' in display_method),
        ("Help text visible", "Add domains using the form below to allow access" in display_method),
        ("Warning styling", "warning_bg" in display_method),
    ]
    
    for check_name, result in checks:
        status = "âœ“" if result else "âœ—"
        print(f"  {status} {check_name}")
        if not result:
            all_passed = False
    
    print("\n  Expected Behavior:")
    print("    â€¢ Clear message: 'No trusted domains configured'")
    print("    â€¢ Helpful guidance for user to add domains")
    print("    â€¢ No empty scrollable list shown")
    print("    â€¢ Add domain form still accessible below")
    
    # Scenario 2: Short domain list (1-3 domains)
    print_scenario(
        "Short Domain List (1-3 domains)",
        "User has a few domains configured"
    )
    
    checks = [
        ("Create scrollable container", 'list_container = tk.Frame(parent' in display_method),
        ("Container expands", 'expand=True' in display_method and 'list_container.pack' in display_method),
        ("Canvas for domains", "canvas = tk.Canvas(" in display_method),
        ("Height calculation", "min(300, len(current_domains) * 50)" in display_method),
        ("All domains visible", "for domain in current_domains:" in display_method),
    ]
    
    for check_name, result in checks:
        status = "âœ“" if result else "âœ—"
        print(f"  {status} {check_name}")
        if not result:
            all_passed = False
    
    print("\n  Expected Behavior:")
    print("    â€¢ All domains visible without scrolling (< 6 domains)")
    print("    â€¢ Each domain has status icon and remove button")
    print("    â€¢ Container sized to content")
    print("    â€¢ No vertical scrollbar needed")
    
    # Scenario 3: Long domain list (10+ domains)
    print_scenario(
        "Long Domain List (10+ domains)",
        "User has many domains configured"
    )
    
    checks = [
        ("Scrollbar creation", "scrollbar = tk.Scrollbar(" in display_method),
        ("Max height limit", "min(300, len(current_domains) * 50)" in display_method),
        ("Vertical scrollbar", 'orient="vertical"' in display_method),
        ("Scroll command config", "yscrollcommand=scrollbar.set" in display_method),
        ("Scrollbar packing", 'scrollbar.pack(side="right", fill="y")' in display_method),
    ]
    
    for check_name, result in checks:
        status = "âœ“" if result else "âœ—"
        print(f"  {status} {check_name}")
        if not result:
            all_passed = False
    
    print("\n  Expected Behavior:")
    print("    â€¢ Scrollbar appears on right side")
    print("    â€¢ Max height of 300px (about 6 domains)")
    print("    â€¢ All domains accessible via scrolling")
    print("    â€¢ Smooth scrolling with mouse wheel")
    
    # Scenario 4: Small window size
    print_scenario(
        "Small Window Size (e.g., 400px wide)",
        "User resizes window to very small size"
    )
    
    # Check main content frame implementation
    start_idx = content.find('def _show_tailscale_config(self):')
    end_idx = content.find('\n    def ', start_idx + 1)
    config_method = content[start_idx:end_idx] if start_idx != -1 and end_idx != -1 else ""
    
    checks = [
        ("Main canvas scrollable", "canvas = tk.Canvas(self.body_frame" in config_method),
        ("Main scrollbar present", "scrollbar = tk.Scrollbar(self.body_frame" in config_method),
        ("Canvas expands", 'canvas.pack(side="left", fill="both", expand=True)' in config_method),
        ("Dynamic width calc", "content_width = min(600, canvas_width - 20)" in config_method),
        ("Content never cut off", "canvas.configure(scrollregion=canvas.bbox" in config_method),
    ]
    
    for check_name, result in checks:
        status = "âœ“" if result else "âœ—"
        print(f"  {status} {check_name}")
        if not result:
            all_passed = False
    
    print("\n  Expected Behavior:")
    print("    â€¢ Content area shrinks to fit window")
    print("    â€¢ Vertical scrollbar appears for main content")
    print("    â€¢ All widgets remain accessible")
    print("    â€¢ No horizontal scrollbar needed")
    print("    â€¢ Content centered with appropriate width")
    
    # Scenario 5: Large window size
    print_scenario(
        "Large Window Size (e.g., 1920px wide)",
        "User has a large monitor or maximized window"
    )
    
    checks = [
        ("Max width constraint", "content_width = min(600, canvas_width - 20)" in config_method),
        ("Center calculation", "x_offset = (canvas_width - content_width) // 2" in config_method),
        ("Canvas coords update", "canvas.coords(canvas_window, x_offset, 10)" in config_method),
        ("Responsive to resize", 'canvas.bind("<Configure>"' in config_method),
        ("Content width config", "canvas.itemconfig(canvas_window, width=content_width)" in config_method),
    ]
    
    for check_name, result in checks:
        status = "âœ“" if result else "âœ—"
        print(f"  {status} {check_name}")
        if not result:
            all_passed = False
    
    print("\n  Expected Behavior:")
    print("    â€¢ Content width limited to 600px max")
    print("    â€¢ Content centered horizontally")
    print("    â€¢ Empty space on both sides")
    print("    â€¢ Clean, uncluttered appearance")
    
    # Scenario 6: Window resize during use
    print_scenario(
        "Dynamic Window Resizing",
        "User resizes window while viewing the page"
    )
    
    checks = [
        ("Canvas configure bind", 'canvas.bind("<Configure>"' in config_method),
        ("Content configure bind", 'content.bind("<Configure>"' in config_method),
        ("Domain canvas configure", ".bind(\"<Configure>\", configure" in display_method),
        ("Scroll region update", "canvas.configure(scrollregion=canvas.bbox" in display_method),
        ("Width recalculation", "canvas_width = canvas.winfo_width()" in display_method),
    ]
    
    for check_name, result in checks:
        status = "âœ“" if result else "âœ—"
        print(f"  {status} {check_name}")
        if not result:
            all_passed = False
    
    print("\n  Expected Behavior:")
    print("    â€¢ Layout updates smoothly on resize")
    print("    â€¢ No flickering or jumpy behavior")
    print("    â€¢ Content recenters automatically")
    print("    â€¢ Scrollbars appear/disappear as needed")
    print("    â€¢ All content remains visible")
    
    # Summary
    print("\n" + "=" * 80)
    print("Test Summary")
    print("=" * 80)
    
    if all_passed:
        print("\nâœ“ All scenarios are properly handled!")
        print("\nThe responsive domain list implementation:")
        print("  âœ“ Handles empty state with clear messaging")
        print("  âœ“ Displays short lists without unnecessary scrolling")
        print("  âœ“ Provides scrolling for long lists")
        print("  âœ“ Adapts to small windows without cutting off content")
        print("  âœ“ Centers content in large windows")
        print("  âœ“ Updates smoothly during window resizing")
        return True
    else:
        print("\nâœ— Some scenarios are not properly handled.")
        return False

if __name__ == "__main__":
    success = test_scenarios()
    sys.exit(0 if success else 1)
